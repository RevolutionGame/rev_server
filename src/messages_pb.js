/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ActionType', null, global);
goog.exportSymbol('proto.BodyType', null, global);
goog.exportSymbol('proto.LobbyInfo', null, global);
goog.exportSymbol('proto.Packet', null, global);
goog.exportSymbol('proto.PlayerInfo', null, global);
goog.exportSymbol('proto.PlayerLocation', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerInfo.displayName = 'proto.PlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInfo}
 */
proto.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInfo;
  return proto.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInfo}
 */
proto.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PlayerInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.PlayerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 score = 3;
 * @return {number}
 */
proto.PlayerInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LobbyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LobbyInfo.repeatedFields_, null);
};
goog.inherits(proto.LobbyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LobbyInfo.displayName = 'proto.LobbyInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LobbyInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LobbyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LobbyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LobbyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LobbyInfo}
 */
proto.LobbyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LobbyInfo;
  return proto.LobbyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LobbyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LobbyInfo}
 */
proto.LobbyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LobbyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LobbyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LobbyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LobbyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 player_id = 1;
 * @return {number}
 */
proto.LobbyInfo.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LobbyInfo.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PlayerInfo players = 2;
 * @return {!Array<!proto.PlayerInfo>}
 */
proto.LobbyInfo.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 2));
};


/** @param {!Array<!proto.PlayerInfo>} value */
proto.LobbyInfo.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.LobbyInfo.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PlayerInfo, opt_index);
};


proto.LobbyInfo.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerLocation.displayName = 'proto.PlayerLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    r: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerLocation}
 */
proto.PlayerLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerLocation;
  return proto.PlayerLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerLocation}
 */
proto.PlayerLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setR(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 player_id = 1;
 * @return {number}
 */
proto.PlayerLocation.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PlayerLocation.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.PlayerLocation.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.PlayerLocation.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.PlayerLocation.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.PlayerLocation.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float r = 4;
 * @return {number}
 */
proto.PlayerLocation.prototype.getR = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.PlayerLocation.prototype.setR = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Packet.oneofGroups_);
};
goog.inherits(proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Packet.displayName = 'proto.Packet';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Packet.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.Packet.BodyCase = {
  BODY_NOT_SET: 0,
  PLAYER_INFO: 2,
  LOBBY_INFO: 3,
  PLAYER_LOCATION: 4
};

/**
 * @return {proto.Packet.BodyCase}
 */
proto.Packet.prototype.getBodyCase = function() {
  return /** @type {proto.Packet.BodyCase} */(jspb.Message.computeOneofCase(this, proto.Packet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    bodyType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playerInfo: (f = msg.getPlayerInfo()) && proto.PlayerInfo.toObject(includeInstance, f),
    lobbyInfo: (f = msg.getLobbyInfo()) && proto.LobbyInfo.toObject(includeInstance, f),
    playerLocation: (f = msg.getPlayerLocation()) && proto.PlayerLocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Packet;
  return proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.BodyType} */ (reader.readEnum());
      msg.setBodyType(value);
      break;
    case 2:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerInfo(value);
      break;
    case 3:
      var value = new proto.LobbyInfo;
      reader.readMessage(value,proto.LobbyInfo.deserializeBinaryFromReader);
      msg.setLobbyInfo(value);
      break;
    case 4:
      var value = new proto.PlayerLocation;
      reader.readMessage(value,proto.PlayerLocation.deserializeBinaryFromReader);
      msg.setPlayerLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBodyType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPlayerInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getLobbyInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LobbyInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayerLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PlayerLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional BodyType body_type = 1;
 * @return {!proto.BodyType}
 */
proto.Packet.prototype.getBodyType = function() {
  return /** @type {!proto.BodyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.BodyType} value */
proto.Packet.prototype.setBodyType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PlayerInfo player_info = 2;
 * @return {?proto.PlayerInfo}
 */
proto.Packet.prototype.getPlayerInfo = function() {
  return /** @type{?proto.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, proto.PlayerInfo, 2));
};


/** @param {?proto.PlayerInfo|undefined} value */
proto.Packet.prototype.setPlayerInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Packet.oneofGroups_[0], value);
};


proto.Packet.prototype.clearPlayerInfo = function() {
  this.setPlayerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Packet.prototype.hasPlayerInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LobbyInfo lobby_info = 3;
 * @return {?proto.LobbyInfo}
 */
proto.Packet.prototype.getLobbyInfo = function() {
  return /** @type{?proto.LobbyInfo} */ (
    jspb.Message.getWrapperField(this, proto.LobbyInfo, 3));
};


/** @param {?proto.LobbyInfo|undefined} value */
proto.Packet.prototype.setLobbyInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Packet.oneofGroups_[0], value);
};


proto.Packet.prototype.clearLobbyInfo = function() {
  this.setLobbyInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Packet.prototype.hasLobbyInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlayerLocation player_location = 4;
 * @return {?proto.PlayerLocation}
 */
proto.Packet.prototype.getPlayerLocation = function() {
  return /** @type{?proto.PlayerLocation} */ (
    jspb.Message.getWrapperField(this, proto.PlayerLocation, 4));
};


/** @param {?proto.PlayerLocation|undefined} value */
proto.Packet.prototype.setPlayerLocation = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.Packet.oneofGroups_[0], value);
};


proto.Packet.prototype.clearPlayerLocation = function() {
  this.setPlayerLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Packet.prototype.hasPlayerLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.BodyType = {
  NONE: 0,
  REQUEST_SLOT: 1,
  PLAYER_JOIN: 2,
  PLAYER_DISCONNECT: 3,
  LOBBY_INFO: 4,
  PLAYER_READY: 5,
  WORLD_INFO: 6,
  GAME_START: 7,
  GAME_END: 8,
  PLAYER_LOCATION: 9,
  PLAYER_ACTION: 10
};

/**
 * @enum {number}
 */
proto.ActionType = {
  FIRE_GUN: 0,
  DESPAWN_SHIP: 1,
  SPAWN_SHIP: 2
};

goog.object.extend(exports, proto);
